<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<heuristics>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj</type>
<text>[something] should support [something].</text>
<conditions>
<condition>nsubj.governor="support"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Supports [something].</text>
<conditions>
<condition>dobj.governor="use support"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Provides [something].</text>
<conditions>
<condition>dobj.governor="provide"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/prep_for</type>
<text>Adds support.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="support"</condition>
<condition>dobj.governor=prep_for.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj</type>
<text>[something] supports.</text>
<conditions>
<condition>nsubj.governor="work support"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj</type>
<text>[something] should return [something].</text>
<conditions>
<condition>nsubj.governor="return"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/vmod</type>
<text>Needs way.</text>
<conditions>
<condition>dobj.governor="need"</condition>
<condition>dobj.dependent="way"</condition>
<condition>dobj.dependent=vmod.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_for</type>
<text/>
<conditions>
<condition>prep_for.governor="support"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj</type>
<text>[something] works.</text>
<conditions>
<condition>nsubj.governor="work"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>vmod</type>
<text>[verb]s.</text>
<conditions>
<condition>vmod.governor="way"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Creates [something].</text>
<conditions>
<condition>dobj.governor="create"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Places [something].</text>
<conditions>
<condition>dobj.governor="set place"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>To display [something].</text>
<conditions>
<condition>aux.governor="display"</condition>
<condition>aux.dependent="to"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj/vmod</type>
<text>[something] should have parameter.</text>
<conditions>
<condition>nsubj.governor="have"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=dobj.governor</condition>
<condition>dobj.dependent="parameter"</condition>
<condition>dobj.governor=vmod.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Adds cmdlet.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="cmdlet"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/xcomp</type>
<text>Adds [something].</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.governor=xcomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Adds parameter.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="parameter"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/dobj</type>
<text>[something] adds [something].</text>
<conditions>
<condition>nsubj.governor="add"</condition>
<condition>nsubj.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/prep_for</type>
<text>Adds support.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="support"</condition>
<condition>dobj.dependent=prep_for.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Adds property.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="property"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/ccomp</type>
<text>To detect.</text>
<conditions>
<condition>aux.governor="discover detect"</condition>
<condition>aux.dependent="to"</condition>
<condition>aux.governor=ccomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>neg</type>
<text/>
<conditions>
<condition>neg.governor="support"</condition>
<condition>neg.dependent="not"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Supports [something].</text>
<conditions>
<condition>dobj.governor="support"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] support [something].</text>
<conditions>
<condition>aux.governor="support"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj/prep_for</type>
<text>[something] should return [something].</text>
<conditions>
<condition>nsubj.governor="return"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=dobj.governor</condition>
<condition>dobj.governor=prep_for.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>xcomp</type>
<text>Makes.</text>
<conditions>
<condition>xcomp.governor="make"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/neg/prep_for</type>
<text>[something] do not work.</text>
<conditions>
<condition>nsubj.governor="work"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="do"</condition>
<condition>aux.governor=neg.governor</condition>
<condition>neg.governor=prep_for.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/neg/dobj/nsubj</type>
<text>[something] [auxiliary] not find [something].</text>
<conditions>
<condition>aux.governor="find"</condition>
<condition>aux.governor=neg.governor</condition>
<condition>neg.governor=dobj.governor</condition>
<condition>dobj.governor=nsubj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/neg</type>
<text>[something] do not work.</text>
<conditions>
<condition>nsubj.governor="work"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="do"</condition>
<condition>aux.governor=neg.governor</condition>
<condition>neg.dependent="n't"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/xcomp</type>
<text>[something] should support.</text>
<conditions>
<condition>nsubj.governor="support"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=xcomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj</type>
<text>[something] should contain [something].</text>
<conditions>
<condition>nsubj.governor="contain"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>neg</type>
<text/>
<conditions>
<condition>neg.governor="find"</condition>
<condition>neg.dependent="not"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux</type>
<text>Start-process should support.</text>
<conditions>
<condition>nsubj.governor="support"</condition>
<condition>nsubj.dependent="start-process"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj</type>
<text>[something] [auxiliary] take [something].</text>
<conditions>
<condition>nsubj.governor="take"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] provide [something].</text>
<conditions>
<condition>aux.governor="provide"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>xcomp/prep_with</type>
<text>Extends to process.</text>
<conditions>
<condition>xcomp.governor="extend"</condition>
<condition>xcomp.dependent="process"</condition>
<condition>xcomp.dependent=prep_with.governor</condition>
<condition>prep_with.dependent="property"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>vmod/dobj</type>
<text>[verb]s [something].</text>
<conditions>
<condition>vmod.governor="add"</condition>
<condition>vmod.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] set [something].</text>
<conditions>
<condition>aux.governor="set"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/ccomp</type>
<text>[something] should suggest.</text>
<conditions>
<condition>nsubj.governor="suggest"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=ccomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj</type>
<text>[something] should set [something].</text>
<conditions>
<condition>nsubj.governor="set"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/xcomp</type>
<text>[something] needs.</text>
<conditions>
<condition>nsubj.governor="require need"</condition>
<condition>nsubj.governor=xcomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Adds ability.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="capability ability"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Displays [something].</text>
<conditions>
<condition>dobj.governor="display"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux/dobj</type>
<text>[something] [auxiliary] read [something].</text>
<conditions>
<condition>nsubj.governor="read"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/prep_to</type>
<text>Adds support.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="support"</condition>
<condition>dobj.governor=prep_to.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>xcomp</type>
<text>Considers.</text>
<conditions>
<condition>xcomp.governor="consider"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>vmod</type>
<text>[verb]s.</text>
<conditions>
<condition>vmod.governor="parameter"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>To support [something].</text>
<conditions>
<condition>aux.governor="support"</condition>
<condition>aux.dependent="to"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/vmod</type>
<text>Adds [something].</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.governor=vmod.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/vmod</type>
<text>Adds ability.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="ability"</condition>
<condition>dobj.governor=vmod.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>To create [something].</text>
<conditions>
<condition>aux.governor="create"</condition>
<condition>aux.dependent="to"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="all"/>
<type>aux/dobj</type>
<text>To have [something].</text>
<conditions>
<condition>aux.governor="have"</condition>
<condition>aux.dependent="to"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_to</type>
<text/>
<conditions>
<condition>prep_to.governor="parameter"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] find [something].</text>
<conditions>
<condition>aux.governor="find"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>To turn [something].</text>
<conditions>
<condition>aux.governor="turn"</condition>
<condition>aux.dependent="to"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/aux</type>
<text>[something] should allow.</text>
<conditions>
<condition>nsubj.governor="allow"</condition>
<condition>nsubj.governor=aux.governor</condition>
<condition>aux.dependent="should"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/cop</type>
<text>[something] is miss.</text>
<conditions>
<condition>nsubj.governor="miss"</condition>
<condition>nsubj.governor=cop.governor</condition>
<condition>cop.dependent="be"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>xcomp</type>
<text>Needs.</text>
<conditions>
<condition>xcomp.governor="require need"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Adds option.</text>
<conditions>
<condition>dobj.governor="add"</condition>
<condition>dobj.dependent="option"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Contains [something].</text>
<conditions>
<condition>dobj.governor="contain"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux</type>
<text>To install.</text>
<conditions>
<condition>aux.governor="install"</condition>
<condition>aux.dependent="to"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_on/nsubj</type>
<text/>
<conditions>
<condition>prep_on.governor="depend"</condition>
<condition>prep_on.governor=nsubj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] allow [something].</text>
<conditions>
<condition>aux.governor="allow"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Lists version.</text>
<conditions>
<condition>dobj.governor="enumerate list"</condition>
<condition>dobj.dependent="version"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>-lsb-s -rsb-.</text>
<conditions>
<condition>dobj.governor="-lsb-"</condition>
<condition>dobj.dependent="-rsb-"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/dobj</type>
<text>[something] provides [something].</text>
<conditions>
<condition>nsubj.governor="provide"</condition>
<condition>nsubj.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_in</type>
<text/>
<conditions>
<condition>prep_in.governor="define"</condition>
<condition>prep_in.dependent="module"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] enable [something].</text>
<conditions>
<condition>aux.governor="enable"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_of</type>
<text/>
<conditions>
<condition>prep_of.governor="collection combination"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/dobj</type>
<text>[something] allows [something].</text>
<conditions>
<condition>nsubj.governor="allow"</condition>
<condition>nsubj.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>xcomp</type>
<text>Enables.</text>
<conditions>
<condition>xcomp.governor="enable"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/xcomp</type>
<text>Allows [something].</text>
<conditions>
<condition>dobj.governor="allow"</condition>
<condition>dobj.governor=xcomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>xcomp</type>
<text>Allows.</text>
<conditions>
<condition>xcomp.governor="allow"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/dobj</type>
<text>[something] shows [something].</text>
<conditions>
<condition>nsubj.governor="show"</condition>
<condition>nsubj.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Shows [something].</text>
<conditions>
<condition>dobj.governor="show"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] add [something].</text>
<conditions>
<condition>aux.governor="add"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/xcomp</type>
<text>[something] needs.</text>
<conditions>
<condition>nsubj.governor="require need"</condition>
<condition>nsubj.governor=xcomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/prep_for</type>
<text>Improves [something].</text>
<conditions>
<condition>dobj.governor="improve"</condition>
<condition>dobj.governor=prep_for.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj/xcomp</type>
<text>Enables [something].</text>
<conditions>
<condition>dobj.governor="enable"</condition>
<condition>dobj.governor=xcomp.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] produce [something].</text>
<conditions>
<condition>aux.governor="produce"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="all"/>
<type>aux</type>
<text>Do show.</text>
<conditions>
<condition>aux.governor="show"</condition>
<condition>aux.dependent="do"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj/dobj</type>
<text>[something] ignores [something].</text>
<conditions>
<condition>nsubj.governor="ignore"</condition>
<condition>nsubj.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>neg</type>
<text/>
<conditions>
<condition>neg.governor="load"</condition>
<condition>neg.dependent="not"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Implements [something].</text>
<conditions>
<condition>dobj.governor="implement"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux/dobj</type>
<text>[auxiliary] handle [something].</text>
<conditions>
<condition>aux.governor="handle"</condition>
<condition>aux.governor=dobj.governor</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Handles [something].</text>
<conditions>
<condition>dobj.governor="handle"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Does [something].</text>
<conditions>
<condition>dobj.governor="make do"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Misses [something].</text>
<conditions>
<condition>dobj.governor="miss"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj</type>
<text>[something] fails.</text>
<conditions>
<condition>nsubj.governor="fail"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_of</type>
<text/>
<conditions>
<condition>prep_of.governor="array"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Introduces [something].</text>
<conditions>
<condition>dobj.governor="introduce"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj</type>
<text>[something] attributes.</text>
<conditions>
<condition>nsubj.governor="attribute"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_of</type>
<text/>
<conditions>
<condition>prep_of.governor="collection set"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Refactors [something].</text>
<conditions>
<condition>dobj.governor="refactor"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>aux</type>
<text>[auxiliary] do.</text>
<conditions>
<condition>aux.governor="do"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj</type>
<text>[something] does.</text>
<conditions>
<condition>nsubj.governor="do"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Terminates [something].</text>
<conditions>
<condition>dobj.governor="terminate"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>dobj</type>
<text>Does [something].</text>
<conditions>
<condition>dobj.governor="make do"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_of</type>
<text/>
<conditions>
<condition>prep_of.governor="format"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_in</type>
<text/>
<conditions>
<condition>prep_in.governor="variable"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="all"/>
<type>nsubj</type>
<text>[something] goes.</text>
<conditions>
<condition>nsubj.governor="go"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>vmod</type>
<text>[verb]s.</text>
<conditions>
<condition>vmod.governor="alias name"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_of</type>
<text/>
<conditions>
<condition>prep_of.governor="usage"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>prep_of</type>
<text/>
<conditions>
<condition>prep_of.governor="version"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
<NLP_heuristic>
<sentence type="declarative"/>
<type>nsubj</type>
<text>[something] aliases.</text>
<conditions>
<condition>nsubj.governor="alias"</condition>
</conditions>
<sentence_class/>
</NLP_heuristic>
</heuristics>
